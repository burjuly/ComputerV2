V1. Общая презентация
Поддержка следующих математических типов:
- Рациональное число
- Комплексные числа (с рациональными коэффициентами)
- Матрицы
- Полиномиальные уравнения степени меньше или равной 2
- Присвоение выражения переменной путем вывода типа
- Переназначение существующей переменной выражением другого типа
- Присвоение переменной другой переменной (существующей или нет)
- Разрешение математического выражения с определенной переменной(ами) или без нее
- Разрешение уравнения степени меньше или равной 2
- Операций между типами, насколько это возможно
- Выйти из самой программы (по ключевому слову, сигналу, сочетанию клавиш ...)

V2. Assignment part
Ваш computor-v2 должен уметь назначать переменные типов, заимствованных из математики, 
которые вы не обязательно найдете в обычном языке программирования.
Вы ДОЛЖНЫ создавать эти типы переменных и прозрачно встраивать их в свою программу.

* Rational numbers (for any x 2 Q)
$./computorv2
> varA = 2
2
> varB = 4.242
4.242
> varC = -4.3
-4.3

* Imaginary numbers for any x = a + ib
$./computorv2
> varA = 2*i + 3
3 + 2i
> varB = -4i - 4
-4 - 4i

* Matrices
$./computorv2
> varA = [[2,3];[4,3]]
[ 2 , 3 ]
[ 4 , 3 ]
> varB = [[3,4]]
[ 3 , 4 ]
>

* Functions (with only one variable)
$./computorv2
> funA(x) = 2*x^5 + 4x^2 - 5*x + 4
2 * x^5 + 4 * x^2 - 5*x + 4
> funB(y) = 43 * y / (4 % 2 * y)
43 * y / (4 % 2 * y)
> funC(z) = -2 * z - 5
-2 * z - 5

Ваша программа должна иметь возможность переназначать переменную
и изменять тип переменной путем логического вывода таким образом, чтобы:
$./computorv2
> x = 2
2
> y = x
2
> y = 7
7
> y = 2 * i - 4
-4 + 2i

Он также должен иметь возможность переназначить 
результат вычисления переменной, чтобы:
$. / computorv2
> varA = 2 + 4 * 2 - 5 % 4 + 2 * (4 + 5)
27
> varB = 2 * varA - 5 % 4
53
> funA (x) = varA + varB * 4 - 1/2 + x
238,5 + х
> varC = 2 * varA - varB
1
> varD = funA (varC)
239,5
>

V.3 Computational part
• 4 стандартные операции: / + -.
Программа также должна управлять модулями с оператором %, 
а также умножением матриц, которое будет отмечено  **. 
Последовательное умножение двух матриц или скаляра на матрицу отмечается знаком *.
• Вычисление целых и положительных степеней (или нуля) с помощью оператора ^.
• Обрабатывать круглых скобок и приоритеты вычислений.
• Задайте функцию / переменную, затем =? следует использовать
 для возврата значения этой переменной в контексте программы.
• Разрешение вычисления обозначается знаком? оператор в конце ввода

$./computorv2
> a = 2 * 4 + 4
12
> a + 2 = ?
14
>

$./computorv2
> funA(x) = 2 * 4 + x
8 + x
> funB(x) = 4 -5 + (x + 2)^2 - 4
(x + 2)^2 - 5
> funC(x) = 4x + 5 - 2
4 * x + 3
> funA(2) + funB(4) = ?
41
> funC(3) = ?
15


Часть из computorV1
$./computorv2
> funA(x) = x^2 + 2x + 1
x^2 + 2x + 1
> y = 0
0
> funA(x) = y ?
x^2 + 2x + 1 = 0
Une solution sur R :
-1
>

V.4 Syntax part
Имена переменных / функций должны содержать только буквы и не учитывать регистр, 
чтобы varA и vara были идентичными. 
Никакая переменная не может называться i (по понятным причинам).
При каждой проверке ввода вы должны отображать значение, хранящееся в переменной. 
Вы должны отформатировать его так, как вам кажется, при условии, что он остается неизменным.

V.4.1 Rational or imaginary
$./computorv2
> varA = 2
2
> varB= 2 * (4 + varA + 3)
18
> varC =2 * varB
36
> varD = 2 *(2 + 4 *varC -4 /3)
289.333333333

However, 2 * xx does not mean 2 * x2 nor 2 * x, xx here is considered as a variable.

V.4.2 Matrices
$./computorv2
> matA = [[1,2];[3,2];[3,4]]
[ 1 , 2 ]
[ 3 , 2 ]
[ 3 , 4 ]
> matB= [[1,2]]
[ 1 , 2 ]

V.4.3 Functions
$./computorv2
> funA(b) = 2*b+b
2 * b + b
> funB(a) =2 * a
2 * a
> funC(y) =2* y + 4 -2 * 4+1/3
2 * y + 4 - 8 + 0.333333...
> funD(x) = 2 *x
2
